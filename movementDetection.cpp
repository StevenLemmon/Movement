#include <opencv2/opencv.hpp>
#include <iostream>

using namespace cv;
using namespace std;

int main(int, char**) {
		Mat frame; //Current Frame
		Mat fgMaskMOG; //Foreground mask generated by MOC2 method
		Ptr<BackgroundSubtractor> bsMOG; //MOG2 background subtractor
		vector<vector<Point> > contours; //Used for finding movement
		double area = 0.00;

		bsMOG = new BackgroundSubtractorMOG();

		//Open camera
    VideoCapture cap(0);

		//Check to see if opening succeeded
    if(!cap.isOpened()) {
				cerr << "Unable to open camera." << endl;
				exit(EXIT_FAILURE);
		}
		cap.read(frame);
		while(true) {
				//Get a new frame from the camera
				if(!cap.read(frame)) {
						cerr << "Unable to get next frame." << endl;
						exit(EXIT_FAILURE);
				}
				
				//Update the background model
				bsMOG->operator()(frame, fgMaskMOG);
				
				//Dilate frame to fill in holes, then find contours of that frame
				dilate(fgMaskMOG, frame, Mat(), Point(-1, -1), 2, 1);
				findContours( frame, contours, CV_RETR_LIST, CV_CHAIN_APPROX_NONE );

				//Loop through all contours, look for any big ones to detect movement
				//1000 was chosen at random, need to find a better way
				for(int i=0; i<contours.size(); i++) {		
						drawContours(frame, contours, i, Scalar(255, 0, 0));
						area = contourArea(contours[i]);
						if(area > 1000.00)
							cout << "Movement detected." << endl;
				}
		}
    cap.release();
    return 0;
}
